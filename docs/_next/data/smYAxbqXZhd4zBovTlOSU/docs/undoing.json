{"pageProps":{"markdoc":{"content":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["At any stage, you may want to undo something."," ","Here, we'll review a few basic tools for undoing changes that you've made."," ","Be careful, because you can't always undo some of these undos."," ","This is one of the few areas in Git where you may lose some work if you do it wrong."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["One of the common undos takes place when you commit too early and possibly forget to add some files, or you mess up your commit message."," ","If you want to redo that commit, make the additional changes you forgot, stage them, and commit again using the ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["--amend"]}," option:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git commit --amend\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["This command takes your staging area and uses it for the commit."," ","If you've made no changes since your last commit (for instance, you run this command immediately after your previous commit), then your snapshot will look exactly the same, and all you'll change is your commit message."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["The same commit-message editor fires up, but it already contains the message of your previous commit."," ","You can edit the message the same as always, but it overwrites your previous commit."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["As an example, if you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git commit -m 'Initial commit'\n$ git add forgotten_file\n$ git commit --amend\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["You end up with a single commit -- the second commit replaces the results of the first."]},{"$$mdtype":"Tag","name":"Callout","attributes":{"title":"Best Practice","type":"note"},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["It's important to understand that when you're amending your last commit, you're not so much fixing it as ",{"$$mdtype":"Tag","name":"em","attributes":{},"children":["replacing"]}," it entirely with a new, improved commit that pushes the old commit out of the way and puts the new commit in its place."," ","Effectively, it's as if the previous commit never happened, and it won't show up in your repository history."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["The obvious value to amending commits is to make minor improvements to your last commit, without cluttering your repository history with commit messages of the form, \"",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["Oops, forgot to add a file"]},"\" or \"",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["Darn, fixing a typo in last commit"]},"\"."]}]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Only amend commits that are still local and have not been pushed somewhere."," ","Amending previously pushed commits and force pushing the branch will cause problems for your collaborators."," ","For more on what happens when you do this and how to recover if you're on the receiving end read <<_rebase_peril>>."]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"unstaging-a-staged-file"},"children":["Unstaging a Staged File"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["The next two sections demonstrate how to work with your staging area and working directory changes."," ","The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them."," ","For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git add *"]}," and stage them both."," ","How can you unstage one of the two?"," ","The ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git status"]}," command reminds you:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git add *\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    renamed:    README.md -> README\n    modified:   CONTRIBUTING.md\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Right below the \"",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["Changes to be committed"]},"\" text, it says use ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git reset HEAD <file>..."]}," to unstage."," ","So, let's use that advice to unstage the ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["CONTRIBUTING.md"]}," file:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git reset HEAD CONTRIBUTING.md\nUnstaged changes after reset:\nM\tCONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    renamed:    README.md -> README\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["The command is a bit strange, but it works."," ","The ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["CONTRIBUTING.md"]}," file is modified but once again unstaged."]},{"$$mdtype":"Tag","name":"Callout","attributes":{"title":"Be Careful!","type":"warning"},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["It's true that ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git reset"]}," can be a dangerous command, especially if you provide the ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["--hard"]}," flag."," ","However, in the scenario described above, the file in your working directory is not touched, so it's relatively safe."]}]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["For now this magic invocation is all you need to know about the ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git reset"]}," command."," ","We'll go into much more detail about what ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["reset"]}," does and how to master it to do really interesting things in <<ch07-git-tools#_git_reset>>."]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"unmodifying-a-modified-file"},"children":["Unmodifying a Modified File"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["What if you realize that you don't want to keep your changes to the ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["CONTRIBUTING.md"]}," file?"," ","How can you easily unmodify it -- revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?"," ","Luckily, ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git status"]}," tells you how to do that, too."," ","In the last example output, the unstaged area looks like this:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["Changes not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n    modified:   CONTRIBUTING.md\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["It tells you pretty explicitly how to discard the changes you've made."," ","Let's do what it says:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git checkout -- CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n    renamed:    README.md -> README\n\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["You can see that the changes have been reverted."]},{"$$mdtype":"Tag","name":"Callout","attributes":{"title":"Be Careful!","type":"warning"},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["It's important to understand that ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git checkout \\-- <file>"]}," is a dangerous command."," ","Any local changes you made to that file are gone -- Git just replaced that file with the last staged or committed version."," ","Don't ever use this command unless you absolutely know that you don't want those unsaved local changes."]}]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in <<ch03-git-branching#ch03-git-branching>>; these are generally better ways to go."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Remember, anything that is ",{"$$mdtype":"Tag","name":"em","attributes":{},"children":["committed"]}," in Git can almost always be recovered."," ","Even commits that were on branches that were deleted or commits that were overwritten with an ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["--amend"]}," commit can be recovered (see <<ch10-git-internals#_data_recovery>> for data recovery)."," ","However, anything you lose that was never committed is likely never to be seen again."]},{"$$mdtype":"Tag","name":"h2","attributes":{"id":"undoing-things-with-git-restore"},"children":["Undoing things with git restore"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Git version 2.23.0 introduced a new command: ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git restore"]},"."," ","It's basically an alternative to ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git reset"]}," which we just covered."," ","From Git version 2.23.0 onwards, Git will use ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git restore"]}," instead of ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git reset"]}," for many undo operations."]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Let's retrace our steps, and undo things with ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git restore"]}," instead of ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git reset"]},"."]},{"$$mdtype":"Tag","name":"h3","attributes":{"id":"restoring-a-staged-file"},"children":["Restoring a Staged File"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["The next two sections demonstrate how to work with your staging area and working directory changes with ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git restore"]},"."," ","The nice part is that the command you use to determine the state of those two areas also reminds you how to undo changes to them."," ","For example, let's say you've changed two files and want to commit them as two separate changes, but you accidentally type ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git add *"]}," and stage them both."," ","How can you unstage one of the two?"," ","The ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git status"]}," command reminds you:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git add *\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\tmodified:   CONTRIBUTING.md\n\trenamed:    README.md -> README\n\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["Right below the \"",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["Changes to be committed"]},"\" text, it says use ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git restore --staged <file>..."]}," to unstage."," ","So, let's use that advice to unstage the ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["CONTRIBUTING.md"]}," file:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git restore --staged CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\trenamed:    README.md -> README\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   CONTRIBUTING.md\n\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["The ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["CONTRIBUTING.md"]}," file is modified but once again unstaged."]},{"$$mdtype":"Tag","name":"h3","attributes":{"id":"restoring-a-modified-file"},"children":["Restoring a Modified File"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["What if you realize that you don't want to keep your changes to the ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["CONTRIBUTING.md"]}," file?"," ","How can you easily unmodify it -- revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?"," ","Luckily, ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git status"]}," tells you how to do that, too."," ","In the last example output, the unstaged area looks like this:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["Changes not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n\tmodified:   CONTRIBUTING.md\n\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["It tells you pretty explicitly how to discard the changes you've made."," ","Let's do what it says:"]},{"$$mdtype":"Tag","name":"Fence","attributes":{},"children":["$ git restore CONTRIBUTING.md\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git restore --staged <file>...\" to unstage)\n\trenamed:    README.md -> README\n\n"]},{"$$mdtype":"Tag","name":"Callout","attributes":{"title":"Be Careful!","type":"warning"},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["It's important to understand that ",{"$$mdtype":"Tag","name":"code","attributes":{},"children":["git restore <file>"]}," is a dangerous command."," ","Any local changes you made to that file are gone -- Git just replaced that file with the last staged or committed version."," ","Don't ever use this command unless you absolutely know that you don't want those unsaved local changes."]}]}],"frontmatter":{"title":"Undoing Changes","description":null},"file":{"path":"/docs/undoing.md"}}},"__N_SSG":true}